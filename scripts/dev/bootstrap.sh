#!/bin/bash
# SnazzyAI Docker Development Environment Bootstrap Script
# Prepares the development environment for Ubuntu 22.04 & 24.04

set -e  # Exit on any error

echo "üöÄ Bootstrapping SnazzyAI Docker development environment..."

# Detect current user UID/GID to prevent root-owned files
USER_ID=$(id -u)
GROUP_ID=$(id -g)

echo "üìã Detected user ID: $USER_ID, group ID: $GROUP_ID"

# Create .env.docker file for Docker Compose user mapping
echo "üìù Creating .env.docker with user mapping..."
cat > .env.docker << EOF
# Docker user mapping to prevent root-owned files on host
# Auto-generated by bootstrap.sh
UID=$USER_ID
GID=$GROUP_ID
EOF

echo "‚úÖ Created .env.docker"

# Check if main .env file exists, create stub if needed
if [ ! -f .env ]; then
    echo "üìù Creating .env stub file with API key placeholders..."
    cat > .env << 'EOF'
# SnazzyAI Environment Variables
# Copy from .env.example and fill in your actual API keys

# OpenAI API Key for outfit analysis
EXPO_PUBLIC_OPENAI_API_KEY=your_openai_api_key_here

# Optional: ngrok auth token for mobile device testing
# Get from: https://dashboard.ngrok.com/get-started/your-authtoken
NGROK_AUTHTOKEN=your_ngrok_authtoken_here
EOF
    echo "‚ö†Ô∏è  Created .env stub - please add your actual API keys"
    echo "   You can copy from .env.example if it exists"
else
    echo "‚úÖ Existing .env file found - keeping it unchanged"
fi

# Check if backend .env exists
if [ ! -f backend/.env ]; then
    echo "üìù Creating backend/.env stub file..."
    cp .env backend/.env
    cat >> backend/.env << 'EOF'

# Django Settings for Docker development
DEBUG=True
SECRET_KEY=django-insecure-docker-dev-key-change-in-production
ALLOWED_HOSTS=*

# API Configuration
API_TIMEOUT=30
MAX_RETRIES=3
CACHE_TIMEOUT=900
EOF
    echo "‚ö†Ô∏è  Created backend/.env stub - please add your actual Django settings"
else
    echo "‚úÖ Existing backend/.env file found - keeping it unchanged"
fi

# Verify Docker is installed and running
echo "üîç Checking Docker installation..."
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker is not installed. Please install Docker Engine:"
    echo "   Ubuntu 22.04/24.04: https://docs.docker.com/engine/install/ubuntu/"
    exit 1
fi

if ! docker info &> /dev/null; then
    echo "‚ùå Docker is not running. Please start Docker daemon:"
    echo "   sudo systemctl start docker"
    exit 1
fi

# Check Docker Compose version
echo "üîç Checking Docker Compose version..."
if ! docker compose version &> /dev/null; then
    echo "‚ùå Docker Compose v2 is not available. Please install:"
    echo "   Ubuntu: sudo apt install docker-compose-plugin"
    exit 1
fi

COMPOSE_VERSION=$(docker compose version --short)
echo "‚úÖ Docker Compose version: $COMPOSE_VERSION"

# Make scripts executable
echo "üîß Making development scripts executable..."
chmod +x scripts/dev/*.sh

# Print next steps
echo ""
echo "üéâ Bootstrap complete! Next steps:"
echo ""
echo "1. Configure API keys in .env and backend/.env files"
echo "2. Start development environment:"
echo "   ‚Ä¢ Normal mode:        docker compose up --build"
echo "   ‚Ä¢ With host networking: ./scripts/dev/up.sh host"
echo ""
echo "3. Access your app:"
echo "   ‚Ä¢ Backend API:        http://localhost:8000"
echo "   ‚Ä¢ Expo DevTools:      http://localhost:19000"
echo "   ‚Ä¢ Mobile app:         Scan QR code in Expo DevTools"
echo ""
echo "For help: ./scripts/dev/up.sh --help"
**Product Requirements Document: Snazzy AI (MVP 1.0)**

**Document Status:** Final
**Last Updated:** August 28, 2025
**Author:** Product Manager (Gemini)

---

**1. Overview**

Snazzy AI is a mobile personal stylist application designed to help users improve their fashion style. By taking a picture of their outfit, users receive an instant AI-powered analysis, a rating, and a curated feed of recommended clothing items to enhance their look. The Minimum Viable Product (MVP) is focused exclusively on the core user flow of capturing an image and receiving a style analysis, without the complexity of backend services, user accounts, or a database.

**2. Goals & Success Metrics**

**2.1. Primary Goal:**
* Validate the core user value proposition: Can AI provide users with fashion advice they find useful and actionable in a simple, fast, and engaging way?

**2.2. MVP Objectives:**
* Deliver a seamless "capture-to-analysis" user flow.
* Successfully integrate with the OpenAI GPT-4o API for image analysis and recommendation generation.
* Establish a simple, scalable frontend architecture using React Native and Expo.

**2.3. Success Metrics (Post-Launch):**
* **Engagement:** Number of successful outfit analyses per day/week.
* **Retention:** Percentage of users who return to use the app a second time within the first week.
* **Qualitative Feedback:** User reviews and feedback regarding the quality and relevance of the AI-generated style advice.

---

**3. User Flow**

1.  User opens the Snazzy AI app.
2.  The user is immediately presented with a full-screen back camera preview.
3.  User points the camera at a mirror, framing their full outfit.
4.  User presses and holds the circular capture button for 3-5 seconds.
5.  While holding, the button visually shrinks, a colorful border animates around the screen, and a continuous, subtle haptic feedback is active.
6.  Upon successful hold duration (3-5 seconds), a strong haptic buzz occurs, and a photo is captured.
7.  A collapsed bottom modal appears with a loading spinner. The captured image is sent to the OpenAI API.
8.  The OpenAI API returns a JSON payload. The modal updates to show the `outfitName`, `shortDescription`, and `rating`.
9.  User swipes up on the modal to expand it.
10. The expanded view reveals a vertically scrolling feed of 5 recommended clothing items.
11. User taps on a recommended item.
12. The user's default mobile browser (e.g., Safari, Chrome) opens, directing them to the item's purchase URL.

---

**4. Functional Requirements**

**4.1. Feature: Camera & Capture**
* **F-1.1:** The app must open directly to a full-screen camera view, utilizing the device's back camera. The preview must fill the entire screen, edge-to-edge.
* **F-1.2:** A single, circular, white capture button shall be displayed near the bottom-center of the screen.
* **F-1.3:** A short press (< 3 seconds) on the button will cause it to visually shrink but will not trigger a capture. The border animation will only be active during the press and will disappear upon release. No haptic feedback on a short press.
* **F-1.4:** A long press (hold for 3-5 seconds) must trigger the capture process.
* **F-1.5:** During the long press, a colorful border must animate around the edges of the screen.
* **F-1.6:** Haptic feedback must be implemented:
    * A continuous, subtle vibration during the hold.
    * A single, strong buzz to confirm a successful capture after the hold duration is met.
* **F-1.7:** The image is captured *after* the strong buzz confirmation.

**4.2. Feature: AI Analysis & Results**
* **F-2.1:** The captured image must be sent to the OpenAI GPT-4o API for analysis.
* **F-2.2:** The app must display a loading spinner within a collapsed bottom modal while awaiting the API response.
* **F-2.3:** The app must parse the returned JSON and display the following in the collapsed modal:
    * `analysis.outfitName` (string)
    * `analysis.shortDescription` (string, objective tone)
    * `analysis.rating` (number from 1 to 10)
* **F-2.4:** Swiping up on the modal must expand it to reveal the recommendation feed.
* **F-2.5:** The recommendation feed must display 5 items from the `recommendations` array. Each item must display its `imageUrl`, `name`, `brand`, `description`, and `price`.
* **F-2.6:** Tapping a recommendation item must open the provided `purchaseUrl` in the device's default external web browser.

**4.3. Feature: Error Handling**
* **F-3.1:** If the API response indicates an invalid photo (`isValidPhoto: false`), the loading modal must be dismissed.
* **F-3.2:** If the API call fails for any reason (e.g., no network, server error), the loading modal must also be dismissed.
* **F-3.3:** In the event of an error (F-3.1 or F-3.2), a red error banner/popup must appear at the top of the screen. The banner should display a concise error message (e.g., "Could not analyze outfit. Please try again.") and automatically disappear after 3-4 seconds.

---

**5. Technical Requirements & Dependencies**

* **Platform:** iOS and Android.
* **Framework:** React Native with Expo Go.
* **Language:** JavaScript (not TypeScript).
* **Project Setup:** Initialize a standard Expo project and run a `reset-project.js` script to ensure a clean slate. Keep file structure minimal.
* **Dependencies:**
    * `expo-haptics`: For tactile feedback.
    * `expo-camera`: For camera access and preview.
    * `axios` (or similar): For making API requests to OpenAI.
    * A bottom sheet library (e.g., `@gorhom/bottom-sheet`) for the results modal.
* **API Integration:** Direct frontend integration with the OpenAI GPT-4o API. The API key will be stored in the frontend for the MVP.
* **API Data Contract:** The app must expect the JSON structure as defined in the "AI Prompt & Personality" discussion.

---

**6. Out of Scope / Future Considerations**

* **User Authentication:** No user accounts, login, or profiles.
* **History:** The app will not save a history of past analyses. Each session is ephemeral.
* **"Generate More" Button:** The recommendation feed will be fixed at 5 items for the MVP.
* **Backend & Database:** No server-side logic or data persistence. All operations are client-side.
* **Affiliate Link Integration:** The `purchaseUrl` will be a direct link. Affiliate tracking will be implemented in a future version.
* **API Key Security:** Moving the OpenAI API key to a secure backend service is a top priority post-MVP.
